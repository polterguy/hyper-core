/*
 * Main URL resolver for Hyper Core. __Notice__, Hyper Core doesn't really have a _"launch"_ file,
 * since it has no GUI - However, this file is here exclusively to resolve HTTP REST URLs when
 * the backend is being invoked by some frontend.
 */

/*
 * First we remove any query parameters from the given URL.
 */
split:x:/../*/url?value
  =:?


/*
 * Then we split the given main [url] into it its main components,
 * such that we can "outsource" further resolving, to whatever resolver this
 * particular URL was referring to.
 */
split:x:/@split/0?name
  =:/


/*
 * Verifying that the module user is trying to access, actually exists.
 */
if
  fetch:x:/0/0?value
    folder-exists:@HYPER-CORE/{0}/
      :x:/@split/1?name
  not
  p5.web.response.set-status-code:404
  p5.web.echo:Oops, that appears to be a non existent module
  return


/*
 * Before we run our authorize logic, we check if this is a request for
 * our "auth" module, at which we obviously allow everybody access, since it
 * is the only way to allow a client to explicitly login.
 */
if:x:/@split/1?name
  =:auth

  /*
   * Sanity checking that requested submodule actually exists.
   */
  if
    fetch:x:/0/0?value
      file-exists:@HYPER-CORE/{0}/{1}.hl
        :x:/@split/1?name
        :x:/@split/2?name
    not
    p5.web.response.set-status-code:404
    p5.web.echo:Oops, that appears to be a non existent submodule
    return

  /*
   * Evaluating specified "auth" submodule.
   */
  micro.evaluate.file:@HYPER-CORE/auth/{0}.hl
    :x:/@split/2?name

  /*
   * Returning early, to avoid evaluating the rest of this file.
   */
  return


/*
 * Then we verify that user has access to the URL he tries to resolve.
 */
if
  p5.auth.has-access-to-path:bool:false
    filter:p5.hyper-core
    path:x:/../*/split/[0,1]/0?name
  not

  /*
   * User doesn't have access to this module.
   */
  p5.web.response.set-status-code:403
  p5.web.echo:Oops, I can't let you do that Sir
  return


/*
 * This will contain the main "sub-module" name, for which resolver we should further
 * outsource this particular "action" to.
 */
eval-x:x:/+
.operation:x:/@split/1?name


/*
 * Removing the main two components from our URL, as we pass it onwards further into our
 * specific URL resolver.
 */
set:x:/@split(/0|/1)
join:x:/@split/*?name
  sep:/


/*
 * Forward evaluating the [url] argument to our resolver, before we invoke the specific resolver
 * for the current operation.
 *
 * Notice, at this point, the two main components of our [url] has been removed, the first one being
 * the folder for Hyper Core ("/hyper-core/" that is), and the second being the 
 * subfolder (e.g. "/mysql/") that is.
 */
eval-x:x:/+/*/url
micro.evaluate.file:@HYPER-CORE/{0}/evaluate.hl
  :x:/@.operation?value
  url:x:/@join?value
