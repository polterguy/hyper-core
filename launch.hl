/*
 * Main URL resolver for Hyper Core.
 *
 * First we remove any query parameters from the given URL.
 */
split:x:/../*/url?value
  =:?


/*
 * Then we split the given main [url] into it its main components,
 * such that we can "outsource" further resolving, to whatever resolver this
 * particular URL was referring to.
 */
split:x:/@split/0?name
  =:/


/*
 * Before we run our authorize logic, we check if this is a request for
 * our "/login" url, at which we (obviously) allow everybody access.
 */
if:x:/@split/0/-?name
  =:login
  micro.evaluate.file:@HYPER-CORE/authentication/login.hl
  return
else-if:x:/@split/0/-?name
  =:logout
  micro.evaluate.file:@HYPER-CORE/authentication/logout.hl
  return
else-if:x:/@split/0/-?name
  =:whoami
  micro.evaluate.file:@HYPER-CORE/authentication/whoami.hl
  return


/*
 * Then we verify that user has access to the URL he tries to resolve.
 */
if
  p5.auth.has-access-to-path:bool:false
    filter:p5.hyper-core
    path:x:/../*/split/[0,1]/0?name
  not

  /*
   * User doesn't have access to this module.
   */
  p5.web.response.set-status-code:403
  p5.web.echo:Access denied
  return


/*
 * This will contain the main "sub-module" name, for which resolver we should further
 * outsource this particular "action" to.
 */
eval-x:x:/+
.operation:x:/@split/1?name


/*
 * Removing the main two components from our URL, as we pass it onwards further into our
 * specific URL resolver.
 */
set:x:/@split(/0|/1)
join:x:/@split/*?name
  sep:/


/*
 * Forward evaluating the [url] argument to our resolver, before we invoke the specific resolver
 * for the current operation.
 *
 * Notice, at this point, the two main components of our [url] has been removed, the first one being
 * the folder for Hyper Core ("/hyper-core/" that is), and the second being the 
 * subfolder (e.g. "/mysql/") that is.
 */
eval-x:x:/+/*/url
micro.evaluate.file:@HYPER-CORE/{0}/evaluate.hl
  :x:/@.operation?value
  url:x:/@join?value
