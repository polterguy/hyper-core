/*
 * Database resolver, with the responsibility of doing INSERT, SELECT, UPDATE and DELETE
 * from the specified database and table.
 *
 * Will retrieve the database name, which is the 1st part of the URL, and the table name,
 * which is the 2nd part of the URL, and the database operation, which is the 3rd part
 * of the URL, and further pass onwards the operation ot the associated operation accordingly.
 */


/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  url:string


/*
 * Splitting [url] to figure out database name, table name, and operation.
 */
split:x:/../*/url?value
  =:?
split:x:/@split/0?name
  =:/
.args
  database:x:/@split/0?name
  table:x:/@split/1?name
  operation:x:/@split/2?name
eval-x:x:/@.args/*


/*
 * To prevent never ending recursive invocations, we verify that caller is not trying
 * to explicitly invoke the current file as his "operation".
 */
if:x:/@.args/*/operation?value
  =:evaluate
  p5.web.response.set-status-code:403
  p5.web.echo:Oops, I can't let you do that Sir


/*
 * Verifying that the submodule user is trying to access, actually exists.
 */
if
  fetch:x:/0/0?value
    file-exists:@HYPER-CORE/mysql/{0}.hl
      :x:/@.args/*/operation?value
  not
  p5.web.response.set-status-code:404
  p5.web.echo:Oops, that operation doesn't exist.
  return


/*
 * Opening our database connection.
 */
p5.mysql.connect:[{0}]
  :x:/@.args/*/database?value

  /*
   * Invoking specific resolver for our given database operation.
   */
  eval-x:x:/+/*/table
  micro.evaluate.file:@HYPER-CORE/mysql/{0}.hl
    :x:/@.args/*/operation?value
    table:x:/@.args/*/table?value
